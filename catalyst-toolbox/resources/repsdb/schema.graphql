# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `Long` scalar type represents 52-bit integers
scalar Long

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input LongFilterInput {
  and: [Long]
  or: [Long]
  not: LongFilterInput
  eq: Long
  ne: Long
  startsWith: Long
  endsWith: Long
  contains: Long
  notContains: Long
  containsi: Long
  notContainsi: Long
  gt: Long
  gte: Long
  lt: Long
  lte: Long
  null: Boolean
  notNull: Boolean
  in: [Long]
  notIn: [Long]
  between: [Long]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input DelegationFiltersInput {
  id: IDFilterInput
  vp: LongFilterInput
  voter: VoterFiltersInput
  representative: RepresentativeFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: DelegationFiltersInput
  locale: StringFilterInput
  and: [DelegationFiltersInput]
  or: [DelegationFiltersInput]
  not: DelegationFiltersInput
}

input DelegationInput {
  vp: Long
  voter: ID
  representative: ID
  publishedAt: DateTime
}

type Delegation {
  vp: Long!
  voter: VoterEntityResponse
  representative: RepresentativeEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: DelegationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DelegationRelationResponseCollection
  locale: String
}

type DelegationEntity {
  id: ID
  attributes: Delegation
}

type DelegationEntityResponse {
  data: DelegationEntity
}

type DelegationEntityResponseCollection {
  data: [DelegationEntity!]!
  meta: ResponseCollectionMeta!
}

type DelegationRelationResponseCollection {
  data: [DelegationEntity!]!
}

input RepresentativeFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  username: StringFilterInput
  email: StringFilterInput
  headline: StringFilterInput
  statement: StringFilterInput
  expertise: JSONFilterInput
  links: JSONFilterInput
  address: StringFilterInput
  signature: StringFilterInput
  avatar: StringFilterInput
  contribution: StringFilterInput
  hideEmail: BooleanFilterInput
  delegations: DelegationFiltersInput
  vp: LongFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: RepresentativeFiltersInput
  locale: StringFilterInput
  and: [RepresentativeFiltersInput]
  or: [RepresentativeFiltersInput]
  not: RepresentativeFiltersInput
}

input RepresentativeInput {
  name: String
  username: String
  email: String
  headline: String
  statement: String
  expertise: JSON
  links: JSON
  address: String
  signature: String
  avatar: String
  contribution: String
  hideEmail: Boolean
  delegations: [ID]
  vp: Long
  publishedAt: DateTime
}

type Representative {
  name: String!
  username: String!
  email: String
  headline: String
  statement: String
  expertise: JSON
  links: JSON
  address: String
  signature: String
  avatar: String
  contribution: String
  hideEmail: Boolean
  delegations(
    filters: DelegationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DelegationRelationResponseCollection
  vp: Long
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: RepresentativeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): RepresentativeRelationResponseCollection
  locale: String
}

type RepresentativeEntity {
  id: ID
  attributes: Representative
  jwt_token: String
}

type RepresentativeEntityResponse {
  data: RepresentativeEntity
}

type RepresentativeEntityResponseCollection {
  data: [RepresentativeEntity!]!
  meta: ResponseCollectionMeta!
}

type RepresentativeRelationResponseCollection {
  data: [RepresentativeEntity!]!
}

input SectionFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  content: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [SectionFiltersInput]
  or: [SectionFiltersInput]
  not: SectionFiltersInput
}

input SectionInput {
  title: String
  description: String
  type: String
  content: JSON
  publishedAt: DateTime
}

type Section {
  title: String
  description: String
  type: String
  content: JSON
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type SectionEntity {
  id: ID
  attributes: Section
}

type SectionEntityResponse {
  data: SectionEntity
}

type SectionEntityResponseCollection {
  data: [SectionEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: TagFiltersInput
  locale: StringFilterInput
  and: [TagFiltersInput]
  or: [TagFiltersInput]
  not: TagFiltersInput
}

input TagInput {
  name: String
  publishedAt: DateTime
}

type Tag {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): TagRelationResponseCollection
  locale: String
}

type TagEntity {
  id: ID
  attributes: Tag
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

input TranslationFiltersInput {
  id: IDFilterInput
  label: StringFilterInput
  message: StringFilterInput
  content: StringFilterInput
  richtext: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  localizations: TranslationFiltersInput
  locale: StringFilterInput
  and: [TranslationFiltersInput]
  or: [TranslationFiltersInput]
  not: TranslationFiltersInput
}

input TranslationInput {
  label: String
  message: String
  content: String
  richtext: Boolean
}

type Translation {
  label: String!
  message: String
  content: String
  richtext: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  localizations(
    filters: TranslationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TranslationRelationResponseCollection
  locale: String
}

type TranslationEntity {
  id: ID
  attributes: Translation
}

type TranslationEntityResponse {
  data: TranslationEntity
}

type TranslationEntityResponseCollection {
  data: [TranslationEntity!]!
  meta: ResponseCollectionMeta!
}

type TranslationRelationResponseCollection {
  data: [TranslationEntity!]!
}

input VoterFiltersInput {
  id: IDFilterInput
  address: StringFilterInput
  signature: StringFilterInput
  avatar: StringFilterInput
  vp: LongFilterInput
  delegations: DelegationFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  localizations: VoterFiltersInput
  locale: StringFilterInput
  and: [VoterFiltersInput]
  or: [VoterFiltersInput]
  not: VoterFiltersInput
}

input VoterInput {
  address: String
  signature: String
  avatar: String
  vp: Long
  delegations: [ID]
  publishedAt: DateTime
}

type Voter {
  address: String!
  signature: String!
  avatar: String
  vp: Long!
  delegations(
    filters: DelegationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): DelegationRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
  localizations(
    filters: VoterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): VoterRelationResponseCollection
  locale: String
}

type VoterEntity {
  id: ID
  attributes: Voter
}

type VoterEntityResponse {
  data: VoterEntity
}

type VoterEntityResponseCollection {
  data: [VoterEntity!]!
  meta: ResponseCollectionMeta!
}

type VoterRelationResponseCollection {
  data: [VoterEntity!]!
}

union GenericMorph =
    UploadFile
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Delegation
  | Representative
  | Section
  | Tag
  | Translation
  | Voter

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

# A string used to identify an i18n locale
scalar I18NLocaleCode

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input delegationInput {
  representative: Int
  vp: Int
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  delegation(id: ID, locale: I18NLocaleCode): DelegationEntityResponse
  delegations(
    filters: DelegationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): DelegationEntityResponseCollection
  representative(id: ID, locale: I18NLocaleCode): RepresentativeEntityResponse
  representatives(
    filters: RepresentativeFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): RepresentativeEntityResponseCollection
  section(id: ID): SectionEntityResponse
  sections(
    filters: SectionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
  ): SectionEntityResponseCollection
  tag(id: ID, locale: I18NLocaleCode): TagEntityResponse
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): TagEntityResponseCollection
  translation(id: ID, locale: I18NLocaleCode): TranslationEntityResponse
  translations(
    filters: TranslationFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    locale: I18NLocaleCode
  ): TranslationEntityResponseCollection
  voter(id: ID, locale: I18NLocaleCode): VoterEntityResponse
  voters(
    filters: VoterFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
    locale: I18NLocaleCode
  ): VoterEntityResponseCollection
  me: UsersPermissionsMe
  getToken(
    address: String
    signature: String
    locale: I18NLocaleCode
  ): RepresentativeEntityResponse
  delegationsOfVoter(
    voter: Int
    locale: I18NLocaleCode
  ): DelegationEntityResponseCollection
  delegationsOfRepresentative(
    representative: Int
    locale: I18NLocaleCode
  ): DelegationEntityResponseCollection
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createDelegation(
    data: DelegationInput!
    locale: I18NLocaleCode
  ): DelegationEntityResponse
  updateDelegation(
    id: ID!
    data: DelegationInput!
    locale: I18NLocaleCode
  ): DelegationEntityResponse
  deleteDelegation(id: ID!, locale: I18NLocaleCode): DelegationEntityResponse
  createRepresentative(
    data: RepresentativeInput!
    locale: I18NLocaleCode
  ): RepresentativeEntityResponse
  updateRepresentative(
    id: ID!
    data: RepresentativeInput!
    locale: I18NLocaleCode
  ): RepresentativeEntityResponse
  deleteRepresentative(
    id: ID!
    locale: I18NLocaleCode
  ): RepresentativeEntityResponse
  createSection(data: SectionInput!): SectionEntityResponse
  updateSection(id: ID!, data: SectionInput!): SectionEntityResponse
  deleteSection(id: ID!): SectionEntityResponse
  createTag(data: TagInput!, locale: I18NLocaleCode): TagEntityResponse
  updateTag(id: ID!, data: TagInput!, locale: I18NLocaleCode): TagEntityResponse
  deleteTag(id: ID!, locale: I18NLocaleCode): TagEntityResponse
  createTranslation(
    data: TranslationInput!
    locale: I18NLocaleCode
  ): TranslationEntityResponse
  updateTranslation(
    id: ID!
    data: TranslationInput!
    locale: I18NLocaleCode
  ): TranslationEntityResponse
  deleteTranslation(id: ID!, locale: I18NLocaleCode): TranslationEntityResponse
  createVoter(data: VoterInput!, locale: I18NLocaleCode): VoterEntityResponse
  updateVoter(
    id: ID!
    data: VoterInput!
    locale: I18NLocaleCode
  ): VoterEntityResponse
  deleteVoter(id: ID!, locale: I18NLocaleCode): VoterEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
  createDelegationLocalization(
    id: ID
    data: DelegationInput
    locale: I18NLocaleCode
  ): DelegationEntityResponse
  createRepresentativeLocalization(
    id: ID
    data: RepresentativeInput
    locale: I18NLocaleCode
  ): RepresentativeEntityResponse
  createTagLocalization(
    id: ID
    data: TagInput
    locale: I18NLocaleCode
  ): TagEntityResponse
  createTranslationLocalization(
    id: ID
    data: TranslationInput
    locale: I18NLocaleCode
  ): TranslationEntityResponse
  createVoterLocalization(
    id: ID
    data: VoterInput
    locale: I18NLocaleCode
  ): VoterEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  createDelegationsOfVoter(
    voter: Int
    delegations: [delegationInput]
  ): DelegationsOfVoterEntityResponse
  updateDelegationsOfVoter(
    voter: Int
    delegations: [delegationInput]
  ): DelegationsOfVoterEntityResponse
}

type DelegationsOfVoterEntityResponse {
  voter: Int
}
